"""
–ë–æ—Ç –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
"""

import os
import json
import logging
import sqlite3
import requests
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
from notification_system import notification_system

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–µ—Ä—Å–∏—è –±–æ—Ç–∞
VERSION = "1.0.0"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('./vet_doctor_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VET_BOT_TOKEN = os.getenv('VET_BOT_TOKEN', 'YOUR_VET_BOT_TOKEN_HERE')
MAIN_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_MAIN_BOT_TOKEN_HERE')

class VetDoctorDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π"""
    
    def __init__(self, db_path='vetbot.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–∞—á–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS doctors (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                full_name TEXT NOT NULL,
                photo_path TEXT,
                is_approved BOOLEAN DEFAULT 0,
                is_active BOOLEAN DEFAULT 1,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS active_consultations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                client_id INTEGER NOT NULL,
                doctor_id INTEGER,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'waiting', -- waiting, assigned, active, completed
                client_username TEXT,
                client_name TEXT,
                initial_message TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS consultation_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                consultation_id INTEGER NOT NULL,
                sender_type TEXT NOT NULL, -- client, doctor, admin, ai
                sender_id INTEGER,
                sender_name TEXT,
                message_text TEXT NOT NULL,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                telegram_message_id INTEGER,
                FOREIGN KEY (consultation_id) REFERENCES active_consultations (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–∞—á–∞–º
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS doctor_notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                consultation_id INTEGER NOT NULL,
                doctor_id INTEGER NOT NULL,
                message_id INTEGER,
                is_responded BOOLEAN DEFAULT 0,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (consultation_id) REFERENCES active_consultations (id),
                FOREIGN KEY (doctor_id) REFERENCES doctors (id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def register_doctor(self, telegram_id, username, full_name, photo_path=None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO doctors (telegram_id, username, full_name, photo_path)
                VALUES (?, ?, ?, ?)
            ''', (telegram_id, username, full_name, photo_path))
            
            conn.commit()
            return cursor.lastrowid
        except Exception as e:
            logger.error(f"Error registering doctor: {e}")
            return None
        finally:
            conn.close()
    
    def get_doctor(self, telegram_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM doctors WHERE telegram_id = ?
        ''', (telegram_id,))
        
        result = cursor.fetchone()
        conn.close()
        return result
    
    def get_approved_doctors(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM doctors WHERE is_approved = 1 AND is_active = 1
        ''')
        
        result = cursor.fetchall()
        conn.close()
        return result
    
    def create_consultation(self, client_id, client_username, client_name, initial_message):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO active_consultations (client_id, client_username, client_name, initial_message)
                VALUES (?, ?, ?, ?)
            ''', (client_id, client_username, client_name, initial_message))
            
            consultation_id = cursor.lastrowid
            conn.commit()
            return consultation_id
        except Exception as e:
            logger.error(f"Error creating consultation: {e}")
            return None
        finally:
            conn.close()
    
    def assign_doctor_to_consultation(self, consultation_id, doctor_id):
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE active_consultations 
                SET doctor_id = ?, status = 'assigned'
                WHERE id = ? AND status = 'waiting'
            ''', (doctor_id, consultation_id))
            
            if cursor.rowcount > 0:
                conn.commit()
                return True
            return False
        except Exception as e:
            logger.error(f"Error assigning doctor: {e}")
            return False
        finally:
            conn.close()
    
    def add_consultation_message(self, consultation_id, sender_type, sender_id, sender_name, message_text, telegram_message_id=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO consultation_messages 
                (consultation_id, sender_type, sender_id, sender_name, message_text, telegram_message_id)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (consultation_id, sender_type, sender_id, sender_name, message_text, telegram_message_id))
            
            conn.commit()
            return cursor.lastrowid
        except Exception as e:
            logger.error(f"Error adding consultation message: {e}")
            return None
        finally:
            conn.close()

class VetDoctorBot:
    def __init__(self):
        self.application = Application.builder().token(VET_BOT_TOKEN).build()
        self.db = VetDoctorDatabase()
        self.setup_handlers()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.registration_states = {}
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("profile", self.show_profile))
        self.application.add_handler(CommandHandler("consultations", self.show_consultations))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        doctor = self.db.get_doctor(user.id)
        
        if doctor:
            # –í—Ä–∞—á —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if doctor[5]:  # is_approved
                await update.message.reply_text(
                    f"üë®‚Äç‚öïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ–∫—Ç–æ—Ä {doctor[3]}!\n\n"
                    "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                    "üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö\n\n"
                    "–ö–æ–º–∞–Ω–¥—ã:\n"
                    "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
                    "/consultations - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
                )
            else:
                await update.message.reply_text(
                    f"üë®‚Äç‚öïÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–∫—Ç–æ—Ä {doctor[3]}!\n\n"
                    "‚è≥ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                    "üìß –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                )
        else:
            # –ù–æ–≤—ã–π –≤—Ä–∞—á - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            keyboard = [
                [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤—Ä–∞—á", callback_data="register_doctor")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π!\n\n"
                "üè• –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—Ä–∞—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "üìã –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "register_doctor":
            await self.start_registration(query, context)
        elif query.data.startswith("take_client_"):
            consultation_id = int(query.data.split("_")[2])
            await self.take_client(query, context, consultation_id)
    
    async def start_registration(self, query, context):
        """–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Ä–∞—á–∞"""
        user = query.from_user
        self.registration_states[user.id] = {"step": "waiting_name"}
        
        await query.edit_message_text(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞\n\n"
            "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if user.id in self.registration_states:
            await self.handle_registration_step(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ–¥–µ—Ç –ª–∏ –≤—Ä–∞—á –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        doctor = self.db.get_doctor(user.id)
        if doctor and doctor[5]:  # approved doctor
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞
            active_consultation = self.get_doctor_active_consultation(doctor[0])
            
            if active_consultation:
                # –í—Ä–∞—á –≤–µ–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                message_text = update.message.text
                client_id = active_consultation['client_id']
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                success = await notification_system.send_message_to_client(
                    client_id, 
                    message_text, 
                    from_doctor=doctor[3]
                )
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                    notification_system.add_consultation_message(
                        active_consultation['id'], 
                        'doctor', 
                        user.id, 
                        doctor[3], 
                        message_text
                    )
                    
                    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É")
                
                return
        
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/consultations - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
        )
    
    def get_doctor_active_consultation(self, doctor_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM active_consultations 
            WHERE doctor_id = ? AND status = 'active'
            ORDER BY started_at DESC LIMIT 1
        ''', (doctor_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            columns = ['id', 'client_id', 'doctor_id', 'consultation_id', 'started_at', 
                      'status', 'client_username', 'client_name', 'initial_message']
            return dict(zip(columns, result))
        return None
    
    async def handle_registration_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        state = self.registration_states.get(user.id, {})
        
        if state.get("step") == "waiting_name":
            full_name = update.message.text.strip()
            
            if len(full_name) < 5:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)"
                )
                return
            
            self.registration_states[user.id] = {
                "step": "waiting_photo",
                "full_name": full_name
            }
            
            await update.message.reply_text(
                f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_name}\n\n"
                "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
                "(—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ –≤—Ä–∞—á–∞)"
            )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user = update.effective_user
        state = self.registration_states.get(user.id, {})
        
        if state.get("step") == "waiting_photo":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—Ä–∞—á–µ–π
                os.makedirs("doctor_photos", exist_ok=True)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                file = await context.bot.get_file(photo.file_id)
                photo_path = f"doctor_photos/{user.id}_{photo.file_id}.jpg"
                await file.download_to_drive(photo_path)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–∞—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                full_name = state["full_name"]
                doctor_id = self.db.register_doctor(
                    telegram_id=user.id,
                    username=user.username,
                    full_name=full_name,
                    photo_path=photo_path
                )
                
                if doctor_id:
                    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    del self.registration_states[user.id]
                    
                    await update.message.reply_text(
                        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"üë§ –ò–º—è: {full_name}\n"
                        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
                        f"üìß Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                        "‚è≥ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                        "üìß –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞"
                    )
                    
                    # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –≤—Ä–∞—á–µ
                    
                else:
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
                    
            except Exception as e:
                logger.error(f"Error saving doctor photo: {e}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            )
    
    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞"""
        user = update.effective_user
        doctor = self.db.get_doctor(user.id)
        
        if not doctor:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—á\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            )
            return
        
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if doctor[5] else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if doctor[6] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        profile_text = f"""
üë®‚Äç‚öïÔ∏è **–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞**

üë§ **–ò–º—è:** {doctor[3]}
üìß **Username:** @{doctor[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìä **–°—Ç–∞—Ç—É—Å:** {status}
üîÑ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {active}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {doctor[7][:16]}
‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {doctor[8][:16]}
        """
        
        if doctor[4]:  # photo_path
            try:
                with open(doctor[4], 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=profile_text,
                        parse_mode='Markdown'
                    )
            except:
                await update.message.reply_text(profile_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(profile_text, parse_mode='Markdown')
    
    async def show_consultations(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        user = update.effective_user
        doctor = self.db.get_doctor(user.id)
        
        if not doctor or not doctor[5]:  # not approved
            await update.message.reply_text(
                "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
            return
        
        # TODO: –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
        await update.message.reply_text(
            "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
            "üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )
    
    async def take_client(self, query, context, consultation_id):
        """–í–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        user = query.from_user
        doctor = self.db.get_doctor(user.id)
        
        if not doctor or not doctor[5]:  # not approved
            await query.edit_message_text(
                "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"
            )
            return
        
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        success, message = await notification_system.assign_doctor_to_consultation(consultation_id, user.id)
        
        if success:
            await query.edit_message_text(
                f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor[3]}\n"
                f"üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id}\n\n"
                "üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—É."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            consultation_info = notification_system.get_consultation_info(consultation_id)
            if consultation_info:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤—Ä–∞—á—É
                history = notification_system.get_consultation_history(consultation_id)
                if history:
                    history_text = "üìñ **–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º:**\n\n"
                    for sender_type, sender_name, message_text, sent_at in history:
                        icon = {'client': 'üë§', 'ai': 'ü§ñ', 'admin': 'üë®‚Äçüíº'}.get(sender_type, '‚ùì')
                        history_text += f"{icon} **{sender_name}:** {message_text}\n\n"
                    
                    await context.bot.send_message(
                        chat_id=user.id,
                        text=history_text,
                        parse_mode='Markdown'
                    )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤—Ä–∞—á–∞
                client_id = consultation_info[1]  # client_id
                await notification_system.send_message_to_client(
                    client_id,
                    f"üë®‚Äç‚öïÔ∏è –ö –¥–∏–∞–ª–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –≤—Ä–∞—á **{doctor[3]}**!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é –≤—Ä–∞—á—É. "
                    "–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤—Ä–∞—á—É, –∞ –æ—Ç–≤–µ—Ç—ã –≤—Ä–∞—á–∞ - –≤–∞–º.",
                    from_doctor=doctor[3]
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ 'active'
                self.update_consultation_status(consultation_id, 'active')
            
        else:
            await query.edit_message_text(f"‚ùå {message}")
    
    def update_consultation_status(self, consultation_id, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                UPDATE active_consultations 
                SET status = ?
                WHERE id = ?
            ''', (status, consultation_id))
            
            conn.commit()
        except Exception as e:
            logger.error(f"Error updating consultation status: {e}")
        finally:
            conn.close()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print(f"""
üë®‚Äç‚öïÔ∏è –ë–æ—Ç –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π v{VERSION} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...
üîß –§—É–Ω–∫—Ü–∏–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–µ–π, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
üè• –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è
        """)
        
        self.application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    bot = VetDoctorBot()
    bot.run()

