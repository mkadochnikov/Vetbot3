"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ Streamlit –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
–í–µ—Ä—Å–∏—è 3.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–∑–æ–≤–æ–≤ –≤—Ä–∞—á–∞ –∏ –¥–∏–∞–ª–æ–≥–æ–≤
"""
import streamlit as st
import sqlite3
import pandas as pd
import os
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class VetBotAdmin:
    def __init__(self, db_path='vetbot.db'):
        self.db_path = db_path
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return sqlite3.connect(self.db_path)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return {'total_users': 0, 'total_consultations': 0, 'total_calls': 0, 'today_consultations': 0, 'vet_requests': 0}
            
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = conn.execute("SELECT COUNT(*) FROM users")
            stats['total_users'] = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            cursor = conn.execute("SELECT COUNT(*) FROM consultations")
            stats['total_consultations'] = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ –≤—Ä–∞—á–∞
            cursor = conn.execute("SELECT COUNT(*) FROM vet_calls")
            stats['total_calls'] = cursor.fetchone()[0]
            
            # –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞ (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)
            cursor = conn.execute("SELECT COUNT(*) FROM vet_requests")
            stats['vet_requests'] = cursor.fetchone()[0]
            
            # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor = conn.execute("SELECT COUNT(*) FROM consultations WHERE DATE(created_at) = ?", (today,))
            stats['today_consultations'] = cursor.fetchone()[0]
            
            conn.close()
            return stats
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_users': 0, 'total_consultations': 0, 'total_calls': 0, 'today_consultations': 0, 'vet_requests': 0}
    
    def get_recent_users(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
            SELECT user_id, username, first_name, last_name, created_at
            FROM users 
            ORDER BY created_at DESC 
            LIMIT ?
            """
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return pd.DataFrame()
    
    def get_recent_consultations(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
            SELECT c.id, c.user_id, u.username, c.question, c.response, c.created_at
            FROM consultations c
            LEFT JOIN users u ON c.user_id = u.user_id
            ORDER BY c.created_at DESC 
            LIMIT ?
            """
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {e}")
            return pd.DataFrame()
    
    def get_vet_requests(self, limit=20):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
            SELECT id, name, phone, address, created_at
            FROM vet_requests 
            ORDER BY created_at DESC 
            LIMIT ?
            """
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return pd.DataFrame()
    
    def get_user_dialog(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = """
            SELECT 'consultation' as type, question as message, response, created_at
            FROM consultations 
            WHERE user_id = ?
            ORDER BY created_at ASC
            """
            consultations = pd.read_sql_query(query, conn, params=(user_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
            query_admin = """
            SELECT 'admin_message' as type, message, NULL as response, sent_at as created_at
            FROM admin_messages 
            WHERE user_id = ?
            ORDER BY sent_at ASC
            """
            admin_messages = pd.read_sql_query(query_admin, conn, params=(user_id,))
            
            conn.close()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if not consultations.empty and not admin_messages.empty:
                all_messages = pd.concat([consultations, admin_messages], ignore_index=True)
                all_messages = all_messages.sort_values('created_at').reset_index(drop=True)
                return all_messages
            elif not consultations.empty:
                return consultations
            elif not admin_messages.empty:
                return admin_messages
            else:
                return pd.DataFrame()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return pd.DataFrame()
    
    def send_telegram_message(self, user_id, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
        try:
            if not self.bot_token:
                st.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': user_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                self.save_admin_message(user_id, message)
                return True
            else:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
                return False
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def save_admin_message(self, user_id, message):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –ë–î"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return False
            
            admin_username = st.session_state.get('admin_username', 'admin')
            
            cursor = conn.execute("""
                INSERT INTO admin_messages (user_id, admin_username, message, sent_at)
                VALUES (?, ?, ?, ?)
            """, (user_id, admin_username, message, datetime.now()))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

def main():
    st.set_page_config(
        page_title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞",
        page_icon="ü©∫",
        layout="wide"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü©∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ v3.0")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    admin = VetBotAdmin()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        conn = admin.get_db_connection()
        if conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table';")
            table_count = cursor.fetchone()[0]
            st.sidebar.success(f"‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ({table_count} —Ç–∞–±–ª–∏—Ü)")
            conn.close()
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "üöë –í—ã–∑–æ–≤—ã –≤—Ä–∞—á–∞", "üí¨ –î–∏–∞–ª–æ–≥–∏", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if page == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        stats = admin.get_statistics()
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", stats['total_users'])
        
        with col2:
            st.metric("üí¨ –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", stats['total_consultations'])
        
        with col3:
            st.metric("üöë –í—ã–∑–æ–≤—ã –≤—Ä–∞—á–∞", stats['total_calls'])
        
        with col4:
            st.metric("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤", stats['vet_requests'])
        
        with col5:
            st.metric("üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è", stats['today_consultations'])
        
        st.markdown("---")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        st.subheader("üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        consultations = admin.get_recent_consultations(5)
        if not consultations.empty:
            st.dataframe(consultations, use_container_width=True)
        else:
            st.info("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif page == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        
        users = admin.get_recent_users(20)
        if not users.empty:
            st.dataframe(users, use_container_width=True)
            
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
            st.subheader("üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞")
            user_options = {f"{row['username']} ({row['user_id']})": row['user_id'] 
                          for _, row in users.iterrows() if row['username']}
            
            if user_options:
                selected_user = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", list(user_options.keys()))
                if selected_user:
                    user_id = user_options[selected_user]
                    if st.button("üìñ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥"):
                        st.session_state['selected_user_id'] = user_id
                        st.session_state['selected_username'] = selected_user
                        st.rerun()
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    elif page == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
        st.header("üí¨ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
        
        consultations = admin.get_recent_consultations(50)
        if not consultations.empty:
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            users = consultations['username'].dropna().unique()
            selected_user_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", ['–í—Å–µ'] + list(users))
            
            if selected_user_filter != '–í—Å–µ':
                consultations = consultations[consultations['username'] == selected_user_filter]
            
            st.dataframe(consultations, use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if not consultations.empty:
                st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
                consultation_ids = consultations['id'].tolist()
                selected_consultation = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:", consultation_ids)
                
                if selected_consultation:
                    consultation = consultations[consultations['id'] == selected_consultation].iloc[0]
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_area("‚ùì –í–æ–ø—Ä–æ—Å:", consultation['question'], height=100, disabled=True)
                    with col2:
                        st.text_area("üí° –û—Ç–≤–µ—Ç:", consultation['response'], height=100, disabled=True)
                    
                    st.caption(f"üìÖ –î–∞—Ç–∞: {consultation['created_at']} | üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {consultation['username']}")
        else:
            st.info("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –í—ã–∑–æ–≤—ã –≤—Ä–∞—á–∞
    elif page == "üöë –í—ã–∑–æ–≤—ã –≤—Ä–∞—á–∞":
        st.header("üöë –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞")
        
        vet_requests = admin.get_vet_requests(50)
        if not vet_requests.empty:
            st.dataframe(vet_requests, use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏
            st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏")
            request_ids = vet_requests['id'].tolist()
            selected_request = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", request_ids)
            
            if selected_request:
                request = vet_requests[vet_requests['id'] == selected_request].iloc[0]
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.text_input("üë§ –ò–º—è:", request['name'], disabled=True)
                with col2:
                    st.text_input("üìû –¢–µ–ª–µ—Ñ–æ–Ω:", request['phone'], disabled=True)
                with col3:
                    st.text_input("üìç –ê–¥—Ä–µ—Å:", request['address'], disabled=True)
                
                st.caption(f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {request['created_at']}")
        else:
            st.info("–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –î–∏–∞–ª–æ–≥–∏
    elif page == "üí¨ –î–∏–∞–ª–æ–≥–∏":
        st.header("üí¨ –î–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if 'selected_user_id' in st.session_state:
            user_id = st.session_state['selected_user_id']
            username = st.session_state['selected_username']
            
            st.subheader(f"üí¨ –î–∏–∞–ª–æ–≥ —Å {username}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog = admin.get_user_dialog(user_id)
            
            if not dialog.empty:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
                st.subheader("üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
                for _, message in dialog.iterrows():
                    if message['type'] == 'consultation':
                        # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        st.chat_message("user").write(f"‚ùì **–í–æ–ø—Ä–æ—Å:** {message['message']}")
                        if message['response']:
                            st.chat_message("assistant").write(f"ü§ñ **AI-–æ—Ç–≤–µ—Ç:** {message['response']}")
                    elif message['type'] == 'admin_message':
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
                        st.chat_message("assistant").write(f"üë®‚Äçüíº **–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:** {message['message']}")
                
                st.markdown("---")
            
            # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            st.subheader("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
            if 'admin_username' not in st.session_state:
                st.session_state['admin_username'] = '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'
            
            admin_name = st.text_input("üë®‚Äçüíº –í–∞—à–µ –∏–º—è:", st.session_state['admin_username'])
            st.session_state['admin_username'] = admin_name
            
            message_text = st.text_area("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:", height=100, 
                                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            
            col1, col2 = st.columns([1, 4])
            with col1:
                if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
                    if message_text.strip():
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
                        full_message = f"üë®‚Äçüíº **{admin_name}:**\n\n{message_text}"
                        
                        if admin.send_telegram_message(user_id, full_message):
                            st.success("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    else:
                        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            with col2:
                if st.button("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                    if 'selected_user_id' in st.session_state:
                        del st.session_state['selected_user_id']
                    if 'selected_username' in st.session_state:
                        del st.session_state['selected_username']
                    st.rerun()
        
        else:
            st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            st.subheader("üë• –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            users = admin.get_recent_users(10)
            if not users.empty:
                for _, user in users.iterrows():
                    if user['username']:
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üë§ {user['username']} ({user['first_name']} {user['last_name']})")
                        with col2:
                            if st.button(f"üí¨ –î–∏–∞–ª–æ–≥", key=f"dialog_{user['user_id']}"):
                                st.session_state['selected_user_id'] = user['user_id']
                                st.session_state['selected_username'] = f"{user['username']} ({user['user_id']})"
                                st.rerun()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    elif page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üîß –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã")
            st.info("**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:** v3.0")
            st.info("**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** SQLite")
            st.info("**–§—Ä–µ–π–º–≤–æ—Ä–∫:** Streamlit")
            
        with col2:
            st.subheader("üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            st.success("‚úÖ Telegram API")
            st.success("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        st.subheader("üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v3.0")
        st.markdown("""
        - üöë **–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞**
        - üí¨ **–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**
        - ‚úâÔ∏è **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram**
        - üë®‚Äçüíº **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤**
        - üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
        """)

if __name__ == "__main__":
    main()

