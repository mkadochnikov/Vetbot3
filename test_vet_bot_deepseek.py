"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ —Å DeepSeek API
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env.deepseek')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
try:
    from vet_bot_deepseek import DeepSeekAPI, VeterinarySystem
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_deepseek_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API...")
    
    try:
        deepseek = DeepSeekAPI()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_messages = [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?"}
        ]
        
        response = deepseek.chat_completion(test_messages)
        
        if response and "–±–∞–ª–∞–Ω—Å" not in response.lower() and "–æ—à–∏–±–∫–∞" not in response.lower():
            print("‚úÖ DeepSeek API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"–û—Ç–≤–µ—Ç: {response}")
            return True
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API: {response}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_veterinary_consultation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    print("\nüê± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...")
    
    try:
        deepseek = DeepSeekAPI()
        vet_system = VeterinarySystem()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            "–ö–æ—à–∫–∞ 3 –≥–æ–¥–∞, –ø–æ–Ω–æ—Å 2 –¥–Ω—è, –≤—è–ª–∞—è, –ø–ª–æ—Ö–æ –µ—Å—Ç",
            "–ö–æ—Ç–µ–Ω–æ–∫ 6 –º–µ—Å—è—Ü–µ–≤, –∫–∞—à–ª—è–µ—Ç –∏ —á–∏—Ö–∞–µ—Ç –Ω–µ–¥–µ–ª—é",
            "–ö–æ—Ç 5 –ª–µ—Ç, —Ö—Ä–æ–º–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–Ω—é—é –ª–∞–ø—É, –º—è—É–∫–∞–µ—Ç –ø—Ä–∏ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–∏"
        ]
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüìã –¢–µ—Å—Ç {i}: {case}")
            
            messages = vet_system.create_messages(case)
            response = deepseek.chat_completion(messages)
            
            if response:
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
                print(f"{response[:200]}..." if len(response) > 200 else response)
            else:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\nüõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        os.environ['DEEPSEEK_API_KEY'] = 'invalid_key'
        deepseek = DeepSeekAPI()
        
        response = deepseek.chat_completion([{"role": "user", "content": "test"}])
        
        if "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" in response or "–∫–ª—é—á" in response:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ API –∫–ª—é—á–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            return False
            
    except Exception as e:
        print(f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {e}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ —Å DeepSeek API\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['DEEPSEEK_API_KEY', 'TELEGRAM_BOT_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–ª—é—á–∞–º–∏")
        return False
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á
    load_dotenv('.env.deepseek', override=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API", test_deepseek_connection),
        ("–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", test_veterinary_consultation),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {len(results) - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

