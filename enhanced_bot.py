#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Ä–∞—á–∞
"""

import os
import json
import logging
import sqlite3
import requests
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–µ—Ä—Å–∏—è –±–æ—Ç–∞
VERSION = "2.1.0"
BUILD_DATE = "2025-01-06"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-webapp-url.com')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
VET_SERVICE_PHONE = os.getenv('VET_SERVICE_PHONE', '+7-999-123-45-67')

# DeepSeek API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-your-api-key-here')
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

class VetBotDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path='vetbot.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS vet_calls (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                phone TEXT,
                address TEXT,
                pet_type TEXT,
                pet_name TEXT,
                pet_age TEXT,
                problem TEXT,
                urgency TEXT,
                preferred_time TEXT,
                comments TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS consultations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                question TEXT,
                response TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def save_user(self, user_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['id'], user_data.get('username'), 
              user_data.get('first_name'), user_data.get('last_name')))
        
        conn.commit()
        conn.close()
    
    def save_vet_call(self, call_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO vet_calls 
            (user_id, name, phone, address, pet_type, pet_name, pet_age, 
             problem, urgency, preferred_time, comments)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            call_data.get('user_id'),
            call_data.get('name'),
            call_data.get('phone'),
            call_data.get('address'),
            call_data.get('petType'),
            call_data.get('petName'),
            call_data.get('petAge'),
            call_data.get('problem'),
            call_data.get('urgency', 'normal'),
            call_data.get('preferredTime'),
            call_data.get('comments')
        ))
        
        call_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return call_id
    
    def get_user_calls(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM vet_calls 
            WHERE user_id = ? 
            ORDER BY created_at DESC
        ''', (user_id,))
        
        calls = cursor.fetchall()
        conn.close()
        
        return calls

class EnhancedVetBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.db = VetBotDatabase()
        self.setup_handlers()
    
    async def get_ai_consultation(self, user_message, user_name=""):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç DeepSeek"""
        try:
            headers = {
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json"
            }
            
            system_prompt = """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä-—Ñ–µ–ª–∏–Ω–æ–ª–æ–≥ —Å 15+ –ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. 
            –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –ª–µ—á–µ–Ω–∏–∏ –∫–æ—à–µ–∫, –Ω–æ —Ç–∞–∫–∂–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ –¥—Ä—É–≥–∏–º –¥–æ–º–∞—à–Ω–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º.
            
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
            1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –∏ –¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É
            3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–µ–ø–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å–∏—Ç—É–∞—Ü–∏–∏
            4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä
            
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
            –í—Å–µ–≥–¥–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π, —á—Ç–æ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –æ—á–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞.
            –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–º."""
            
            data = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {user_message}"}
                ],
                "max_tokens": 1000,
                "temperature": 0.7
            }
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                lambda: requests.post(DEEPSEEK_API_URL, headers=headers, json=data, timeout=30)
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞
                ai_response += f"\n\nü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–º –±–æ—Ç–æ–º v{VERSION}"
                ai_response += f"\n‚ö†Ô∏è –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä"
                
                return ai_response
            else:
                logger.error(f"DeepSeek API error: {response.status_code} - {response.text}")
                return self.get_fallback_response()
                
        except Exception as e:
            logger.error(f"Error getting AI consultation: {e}")
            return self.get_fallback_response()
    
    def get_fallback_response(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI"""
        return """
ü©∫ –ò–∑–≤–∏–Ω–∏—Ç–µ, AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

üìã –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–∏ –æ—Å—Ç—Ä—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö - —Å—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É
‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ–∫–æ–π –∂–∏–≤–æ—Ç–Ω–æ–º—É
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –∞–ø–ø–µ—Ç–∏—Ç–æ–º
‚Ä¢ –ù–µ –¥–∞–≤–∞–π—Ç–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

üìû –î–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –∑–≤–æ–Ω–∏—Ç–µ: """ + VET_SERVICE_PHONE + """

ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.
        """
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("webapp", self.webapp_command))
        self.application.add_handler(CommandHandler("my_calls", self.my_calls_command))
        self.application.add_handler(CommandHandler("contact", self.contact_command))
        self.application.add_handler(CommandHandler("version", self.version_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.web_app_data))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.save_user(user.to_dict())
        
        keyboard = [
            [InlineKeyboardButton("ü©∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consultation')],
            [InlineKeyboardButton("üì± –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data='my_calls')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contact')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü©∫ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Ñ–µ–ª–∏–Ω–æ–ª–æ–≥
üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ª–µ—á–µ–Ω–∏–µ –∫–æ—à–µ–∫ (—Å—Ç–∞–∂ 15+ –ª–µ—Ç)

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –ø–∏—Ç–æ–º—Ü–∞
‚Ä¢ –í—ã–∑–≤–∞—Ç—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–∞ –¥–æ–º
‚Ä¢ –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–µ—Ç—Å–ª—É–∂–±—ã

üì± –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION} (—Å–±–æ—Ä–∫–∞ {BUILD_DATE})

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:
        """
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

ü©∫ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Ñ–µ–ª–∏–Ω–æ–ª–æ–≥
üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ª–µ—á–µ–Ω–∏–µ –∫–æ—à–µ–∫ (—Å—Ç–∞–∂ 15+ –ª–µ—Ç)
üì± –í–µ—Ä—Å–∏—è: {VERSION} (—Å–±–æ—Ä–∫–∞ {BUILD_DATE})

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/my_calls - –ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞
/contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/version - –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞

ü©∫ –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –ø–∏—Ç–æ–º—Ü–∞
‚Ä¢ –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ - –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–µ–∑–¥ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–∞ –¥–æ–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–∑–æ–≤–∞

‚ö†Ô∏è –í–∞–∂–Ω–æ:
–í —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: {VET_SERVICE_PHONE}
        """
        await update.message.reply_text(help_text)
    
    async def webapp_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        keyboard = [[InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Ä–∞—á–∞:",
            reply_markup=reply_markup
        )
    
    async def my_calls_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        calls = self.db.get_user_calls(user_id)
        
        if not calls:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞.")
            return
        
        response = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞:\n\n"
        
        for call in calls[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
            call_id, user_id, name, phone, address, pet_type, pet_name, pet_age, problem, urgency, preferred_time, comments, status, created_at = call
            
            status_emoji = {
                'pending': '‚è≥',
                'confirmed': '‚úÖ',
                'in_progress': 'üöó',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            response += f"{status_emoji} –ó–∞—è–≤–∫–∞ #{call_id}\n"
            response += f"üìÖ {created_at}\n"
            response += f"üêæ {pet_type} {pet_name or ''}\n"
            response += f"üìç {address[:50]}...\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        await update.message.reply_text(response)
    
    async def contact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contact_text = f"""
üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üè• –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {VET_SERVICE_PHONE}
üìß Email: {os.getenv('VET_SERVICE_EMAIL', 'info@vetservice.com')}

üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: 8:00-22:00
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
‚Ä¢ –ü–ª–∞–Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã: 9:00-20:00

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ –±–æ—Ç–µ: –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ –í—ã–µ–∑–¥ –≤—Ä–∞—á–∞: –æ—Ç 1500 —Ä—É–±.
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –æ—Ç 3000 —Ä—É–±.
        """
        
        await update.message.reply_text(contact_text)
    
    async def version_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞"""
        version_text = f"""
üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏:

ü§ñ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç-—Ñ–µ–ª–∏–Ω–æ–ª–æ–≥
üìä –í–µ—Ä—Å–∏—è: {VERSION}
üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: {BUILD_DATE}
üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ª–µ—á–µ–Ω–∏–µ –∫–æ—à–µ–∫ (—Å—Ç–∞–∂ 15+ –ª–µ—Ç)

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Ä–∞—á–∞
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–∑–æ–≤–æ–≤
        """
        await update.message.reply_text(version_text)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'consultation':
            await self.start_consultation(query)
        elif query.data == 'help':
            await self.show_help(query)
        elif query.data == 'my_calls':
            await self.show_my_calls(query)
        elif query.data == 'contact':
            await self.show_contact(query)
        elif query.data == 'emergency_contact':
            await self.show_emergency_contact(query)
    
    async def show_emergency_contact(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
        emergency_text = f"""
üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –í–ï–¢–ï–†–ò–ù–ê–†–ù–ê–Ø –ü–û–ú–û–©–¨

üìû –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Å–ª—É–∂–±–∞: {VET_SERVICE_PHONE}

‚ö†Ô∏è –ó–≤–æ–Ω–∏—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏:
‚Ä¢ –ü–æ—Ç–µ—Ä–µ —Å–æ–∑–Ω–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
‚Ä¢ –°–∏–ª—å–Ω–æ–º –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–∏
‚Ä¢ –ó–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–º –¥—ã—Ö–∞–Ω–∏–∏
‚Ä¢ –°—É–¥–æ—Ä–æ–≥–∞—Ö
‚Ä¢ –û—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
‚Ä¢ –¢—Ä–∞–≤–º–∞—Ö

üöó –í—ã–µ–∑–¥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –±—Ä–∏–≥–∞–¥—ã: 24/7
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: –æ—Ç 3000 —Ä—É–±.

–ù–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º—è - –∑–≤–æ–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
        """
        await query.edit_message_text(emergency_text)
    
    async def start_consultation(self, query):
        """–ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        consultation_text = """
ü©∫ AI-–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è

ü§ñ –ù–∞—à AI-–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä —Å 15+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ:

1Ô∏è‚É£ –í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—à–∫–∞, —Å–æ–±–∞–∫–∞, –ø—Ç–∏—Ü–∞ –∏ —Ç.–¥.)
2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç –ø–∏—Ç–æ–º—Ü–∞
3Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
4Ô∏è‚É£ –ö–∞–∫ –¥–∞–≤–Ω–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–∏–º–ø—Ç–æ–º—ã
5Ô∏è‚É£ –ß—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏ –¥–ª—è –ª–µ—á–µ–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ AI-–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é.

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –æ—á–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–∞—á–∞!
        """
        
        keyboard = [[InlineKeyboardButton("üì± –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º", web_app=WebAppInfo(url=WEBAPP_URL))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(consultation_text, reply_markup=reply_markup)
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        help_text = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –ø–∏—Ç–æ–º—Ü–∞
üîπ –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ - –∑–∞–∫–∞–∂–∏—Ç–µ –≤—ã–µ–∑–¥ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–∞ –¥–æ–º —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—É—é —Ñ–æ—Ä–º—É
üîπ –ú–æ–∏ –∑–∞—è–≤–∫–∏ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –≤—ã–∑–æ–≤–æ–≤
üîπ –ö–æ–Ω—Ç–∞–∫—Ç—ã - –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª—É–∂–±—ã

‚ö†Ô∏è –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é!

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.
        """
        await query.edit_message_text(help_text)
    
    async def show_my_calls(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        calls = self.db.get_user_calls(user_id)
        
        if not calls:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞.")
            return
        
        response = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
        
        for call in calls[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞—è–≤–∫–∏
            call_id, user_id, name, phone, address, pet_type, pet_name, pet_age, problem, urgency, preferred_time, comments, status, created_at = call
            
            status_emoji = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                'in_progress': 'üöó –í—Ä–∞—á –≤ –ø—É—Ç–∏',
                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
            }.get(status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            response += f"#{call_id} - {status_emoji}\n"
            response += f"üêæ {pet_type}\n"
            response += f"üìÖ {created_at[:16]}\n\n"
        
        await query.edit_message_text(response)
    
    async def show_contact(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
        contact_text = f"""
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–µ—Ç—Å–ª—É–∂–±—ã:

üì± {VET_SERVICE_PHONE}
üìß {os.getenv('VET_SERVICE_EMAIL', 'info@vetservice.com')}

üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: 8:00-22:00
–í—ã–∑–æ–≤—ã: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
        """
        await query.edit_message_text(contact_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π"""
        user_message = update.message.text
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        processing_msg = await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            ai_response = await self.get_ai_consultation(user_message, user_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.save_consultation(update.effective_user.id, user_message, ai_response)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("üì± –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º", web_app=WebAppInfo(url=WEBAPP_URL))],
                [InlineKeyboardButton("üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å", callback_data='emergency_contact')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(ai_response, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error in handle_message: {e}")
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def save_consultation(self, user_id, question, response):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO consultations (user_id, question, response)
                VALUES (?, ?, ?)
            ''', (user_id, question, response))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Error saving consultation: {e}")
    
    async def web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        data = update.effective_message.web_app_data.data
        user = update.effective_user
        
        try:
            call_data = json.loads(data)
            call_data['user_id'] = user.id
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            call_id = self.db.save_vet_call(call_data)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            urgency_text = {
                'normal': '–û–±—ã—á–Ω–∞—è',
                'urgent': '–°—Ä–æ—á–Ω–∞—è', 
                'emergency': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è'
            }.get(call_data.get('urgency', 'normal'), '–û–±—ã—á–Ω–∞—è')
            
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = f"""
‚úÖ –ó–∞—è–≤–∫–∞ #{call_id} –ø—Ä–∏–Ω—è—Ç–∞!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
‚Ä¢ –ò–º—è: {call_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {call_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ê–¥—Ä–µ—Å: {call_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ü–∏—Ç–æ–º–µ—Ü: {call_data.get('petType', '–ù–µ —É–∫–∞–∑–∞–Ω')} {call_data.get('petName', '')}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {call_data.get('petAge', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞: {call_data.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
‚Ä¢ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency_text}

üïê –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: 
{self.get_arrival_time(call_data.get('urgency', 'normal'))}

üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤—Ä–∞—á –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.
            """
            
            await update.effective_message.reply_text(response)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if ADMIN_CHAT_ID:
                admin_message = f"""
üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{call_id}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''} (@{user.username or '–Ω–µ—Ç'})
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {call_data.get('phone')}
üìç –ê–¥—Ä–µ—Å: {call_data.get('address')}
üêæ –ü–∏—Ç–æ–º–µ—Ü: {call_data.get('petType')} {call_data.get('petName', '')} ({call_data.get('petAge', '–≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')})
üö® –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency_text}
üìù –ü—Ä–æ–±–ª–µ–º–∞: {call_data.get('problem')}
‚è∞ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {call_data.get('preferredTime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {call_data.get('comments', '–ù–µ—Ç')}
                """
                
                try:
                    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{call_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {call_data}")
            
        except json.JSONDecodeError:
            await update.effective_message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."
            )
    
    def get_arrival_time(self, urgency):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        times = {
            'emergency': '30-60 –º–∏–Ω—É—Ç',
            'urgent': '1-2 —á–∞—Å–∞',
            'normal': '2-4 —á–∞—Å–∞'
        }
        return times.get(urgency, '2-4 —á–∞—Å–∞')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  –í–ï–¢–ï–†–ò–ù–ê–†–ù–´–ô –ë–û–¢-–§–ï–õ–ò–ù–û–õ–û–ì                 ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìä –í–µ—Ä—Å–∏—è: {VERSION:<47} ‚ïë
‚ïë üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: {BUILD_DATE:<42} ‚ïë
‚ïë üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ª–µ—á–µ–Ω–∏–µ –∫–æ—à–µ–∫ (—Å—Ç–∞–∂ 15+ –ª–µ—Ç)           ‚ïë
‚ïë üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞-—Ñ–µ–ª–∏–Ω–æ–ª–æ–≥–∞ v{VERSION}")
        logger.info(f"–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: {BUILD_DATE}")
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        self.application.run_polling()

if __name__ == '__main__':
    bot = EnhancedVetBot()
    bot.run()

