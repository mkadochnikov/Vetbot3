#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import streamlit as st
import sqlite3
import pandas as pd
import os
from datetime import datetime

class VetBotAdmin:
    def __init__(self, db_path='test_vetbot.db'):
        self.db_path = db_path
    
    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return sqlite3.connect(self.db_path)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def get_recent_users(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
            SELECT user_id, username, first_name, last_name, created_at
            FROM users 
            ORDER BY created_at DESC 
            LIMIT ?
            """
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return pd.DataFrame()

def main():
    st.set_page_config(
        page_title="–¢–µ—Å—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
        page_icon="üß™",
        layout="wide"
    )
    
    st.title("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    st.markdown("---")
    
    admin = VetBotAdmin()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        conn = admin.get_db_connection()
        if conn:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î —É—Å–ø–µ—à–Ω–æ")
            conn.close()
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            return
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    st.header("üë• –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    users = admin.get_recent_users(20)
    if not users.empty:
        st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        st.dataframe(users, use_container_width=True)
        
        st.subheader("üîç –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç username
        user_options = {}
        for _, row in users.iterrows():
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
            display_name = ""
            if row['username'] and row['username'] != 'None':
                display_name = f"{row['username']}"
            elif row['first_name'] and row['first_name'] != 'None':
                display_name = f"{row['first_name']}"
                if row['last_name'] and row['last_name'] != 'None':
                    display_name += f" {row['last_name']}"
            else:
                display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row['user_id']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–∫–æ–±–∫–∞—Ö
            full_display = f"{display_name} ({row['user_id']})"
            user_options[full_display] = row['user_id']
        
        if user_options:
            st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:**")
            for display_name, user_id in user_options.items():
                st.write(f"‚úÖ {display_name}")
            
            selected_user = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", list(user_options.keys()))
            if selected_user:
                user_id = user_options[selected_user]
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user} (ID: {user_id})")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        st.subheader("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        st.success("‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!**")
        st.write("- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ username —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ –∏–º–µ–Ω–∏")
        st.write("- –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞")
        st.write("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ")
        
    else:
        st.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")

if __name__ == "__main__":
    main()

