"""
–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
"""

import logging
import asyncio
from typing import Dict, Any, Optional, Callable, Awaitable
from sqlalchemy.orm import Session
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler
)

from vetbot_improved.config import TELEGRAM_BOT_TOKEN, WEBAPP_URL, VERSION
from vetbot_improved.database.base import get_db
from vetbot_improved.models import (
    User, Consultation, ActiveConsultation, 
    ConsultationMessage, VetCall
)
from vetbot_improved.services.ai_service import AIService
from vetbot_improved.services.notification_service import NotificationService

logger = logging.getLogger(__name__)

class MainBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.notification_service = NotificationService()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("version", self.version_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.web_app_data))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            db_user = db.query(User).filter(User.user_id == user.id).first()
            
            if not db_user:
                db_user = User(
                    user_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                db.add(db_user)
                db.commit()
                logger.info(f"New user registered: {user.id} - {user.username or user.first_name}")
            
        except Exception as e:
            logger.error(f"Error saving user: {e}")
            db.rollback()
        finally:
            db.close()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üè• –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞", web_app=WebAppInfo(url=WEBAPP_URL))
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
            f"–Ø –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∫–æ—à–µ–∫. "
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º.\n\n"
            f"ü§ñ <b>–í–µ—Ä—Å–∏—è:</b> {VERSION}",
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üê± <b>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/version - –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ ü§ñ <b>AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> - –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—à–∫–∏
‚Ä¢ üè• <b>–í—ã–∑–æ–≤ –≤—Ä–∞—á–∞</b> - –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–∑–æ–≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞
‚Ä¢ üë®‚Äç‚öïÔ∏è <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º</b> - –ü–æ—Å–ª–µ AI-–æ—Ç–≤–µ—Ç–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∂–∏–≤—ã–º –≤—Ä–∞—á–∞–º

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—à–∫–∏
2. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç AI
3. –î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∂–∏–≤–æ–π –≤—Ä–∞—á –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É
4. –î–ª—è –≤—ã–∑–æ–≤–∞ –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞"

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤–∏–∑–∏—Ç –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É. –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É!
        """
        
        await update.message.reply_html(help_text)
    
    async def version_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /version"""
        await update.message.reply_text(f"ü§ñ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç v{VERSION}")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "ask_question":
            await query.message.reply_text(
                "üê± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–π –∫–æ—à–∫–∏.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "- –ö–æ—à–∫–∞ –Ω–µ –µ—Å—Ç –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å?\n"
                "- –£ –∫–æ—Ç–∞ —Å–ª–µ–∑—è—Ç—Å—è –≥–ª–∞–∑–∞ –∏ —á–∏—Ö–∞–µ—Ç\n"
                "- –ö–∞–∫–∏–µ –ø—Ä–∏–≤–∏–≤–∫–∏ –Ω—É–∂–Ω—ã –∫–æ—Ç–µ–Ω–∫—É?"
            )
        
        elif query.data == "about":
            about_text = f"""
üê± <b>–û —Å–µ—Ä–≤–∏—Å–µ "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç"</b>

–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
‚Ä¢ ü§ñ <b>AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b> –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∫–æ—à–µ–∫
‚Ä¢ üë®‚Äç‚öïÔ∏è <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –∂–∏–≤—ã–º–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞–º–∏</b>
‚Ä¢ üè• <b>–í—ã–∑–æ–≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–∞ –¥–æ–º</b>

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –í—ã –∑–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—à–∫–∏
2. AI –¥–∞–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
3. –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–≤
4. –í—Ä–∞—á –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç 24/7
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—ã
‚Ä¢ –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö

<b>–í–µ—Ä—Å–∏—è:</b> {VERSION}
            """
            
            await query.message.reply_html(about_text)
    
    async def web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        data = update.effective_message.web_app_data.data
        user = update.effective_user
        
        try:
            import json
            call_data = json.loads(data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            call_data["user_id"] = user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            try:
                vet_call = VetCall(
                    user_id=user.id,
                    name=call_data.get("name", ""),
                    phone=call_data.get("phone", ""),
                    address=call_data.get("address", ""),
                    pet_type=call_data.get("pet_type", ""),
                    pet_name=call_data.get("pet_name", ""),
                    pet_age=call_data.get("pet_age", ""),
                    problem=call_data.get("problem", ""),
                    urgency=call_data.get("urgency", ""),
                    preferred_time=call_data.get("preferred_time", ""),
                    comments=call_data.get("comments", "")
                )
                db.add(vet_call)
                db.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await update.message.reply_html(
                    f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üìã <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {vet_call.id}\n"
                    f"üë§ <b>–ò–º—è:</b> {call_data.get('name')}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {call_data.get('phone')}\n"
                    f"üè† <b>–ê–¥—Ä–µ—Å:</b> {call_data.get('address')}\n\n"
                    f"–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
                )
                
                logger.info(f"New vet call request: {vet_call.id} from user {user.id}")
                
            except Exception as e:
                logger.error(f"Error saving vet call: {e}")
                db.rollback()
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Error processing web app data: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º
        db = next(get_db())
        try:
            active_consultation = db.query(ActiveConsultation).filter(
                ActiveConsultation.client_id == user.id,
                ActiveConsultation.status.in_(["assigned", "active"])
            ).first()
            
            if active_consultation and active_consultation.doctor_id:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
                doctor = db.query(Doctor).filter(Doctor.id == active_consultation.doctor_id).first()
                
                if doctor:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    message = ConsultationMessage(
                        consultation_id=active_consultation.id,
                        sender_type="client",
                        sender_id=user.id,
                        sender_name=user.username or user.first_name,
                        message_text=message_text,
                        telegram_message_id=update.message.message_id
                    )
                    db.add(message)
                    db.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞—á—É
                    await self.notification_service.send_message_to_doctor(
                        doctor.telegram_id,
                        message_text,
                        from_client=user.username or user.first_name
                    )
                    
                    return
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await update.message.reply_text(
                "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            ai_response = await AIService.get_consultation(
                message_text, 
                user.username or user.first_name
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(ai_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            consultation = Consultation(
                user_id=user.id,
                question=message_text,
                response=ai_response,
                consultation_status="waiting_doctor"
            )
            db.add(consultation)
            db.commit()
            
            # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            active_consultation = ActiveConsultation(
                client_id=user.id,
                consultation_id=consultation.id,
                client_username=user.username,
                client_name=user.first_name,
                initial_message=message_text,
                status="waiting"
            )
            db.add(active_consultation)
            db.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            client_message = ConsultationMessage(
                consultation_id=active_consultation.id,
                sender_type="client",
                sender_id=user.id,
                sender_name=user.username or user.first_name,
                message_text=message_text,
                telegram_message_id=update.message.message_id
            )
            db.add(client_message)
            
            ai_message = ConsultationMessage(
                consultation_id=active_consultation.id,
                sender_type="ai",
                sender_id=None,
                sender_name="AI",
                message_text=ai_response
            )
            db.add(ai_message)
            db.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ä–∞—á–µ–π –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
            await self.notification_service.notify_doctors_about_client(
                db,
                active_consultation.id,
                user.username or user.first_name,
                message_text
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤—Ä–∞—á–∞–º
            await update.message.reply_text(
                "üë®‚Äç‚öïÔ∏è –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–∏–º –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞–º. "
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É."
            )
            
        except Exception as e:
            logger.error(f"Error handling message: {e}")
            db.rollback()
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        finally:
            db.close()
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info(f"Bot started. Version: {VERSION}")
        
        try:
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            await self.application.updater.stop_on_signal()
        finally:
            await self.application.stop()
            await self.application.shutdown()
            
            logger.info("Bot stopped")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO,
        handlers=[
            logging.FileHandler('./logs/main_bot.log'),
            logging.StreamHandler()
        ]
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = MainBot()
    asyncio.run(bot.run())

if __name__ == "__main__":
    main()