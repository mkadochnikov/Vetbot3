"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
"""

import logging
from datetime import datetime
from typing import List, Tuple, Dict, Any, Optional
from sqlalchemy.orm import Session
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup

from vetbot_improved.config import TELEGRAM_BOT_TOKEN, VET_BOT_TOKEN
from vetbot_improved.models import (
    Doctor, ActiveConsultation, DoctorNotification
)

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.main_bot = Bot(token=TELEGRAM_BOT_TOKEN) if TELEGRAM_BOT_TOKEN else None
        self.vet_bot = Bot(token=VET_BOT_TOKEN) if VET_BOT_TOKEN else None
    
    def get_approved_doctors(self, db: Session) -> List[Tuple[int, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (telegram_id, full_name)
        """
        doctors = db.query(Doctor).filter(
            Doctor.is_approved == True,
            Doctor.is_active == True
        ).all()
        
        return [(doctor.telegram_id, doctor.full_name) for doctor in doctors]
    
    async def notify_doctors_about_client(
        self, 
        db: Session,
        consultation_id: int, 
        client_name: str, 
        initial_message: str
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            consultation_id: ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            initial_message: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if not self.vet_bot:
            logger.error("VET_BOT_TOKEN not configured")
            return False
        
        doctors = self.get_approved_doctors(db)
        if not doctors:
            logger.warning("No approved doctors found")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∑—è—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –í–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"take_client_{consultation_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        notification_text = f"""
üîî **–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {client_name}
üí¨ **–í–æ–ø—Ä–æ—Å:** {initial_message[:200]}{'...' if len(initial_message) > 200 else ''}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M')}

–ö—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É - –∑–∞ —Ç–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—Å—è –∫–ª–∏–µ–Ω—Ç.
        """
        
        successful_notifications = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –≤—Ä–∞—á–∞–º
        for doctor_telegram_id, doctor_name in doctors:
            try:
                message = await self.vet_bot.send_message(
                    chat_id=doctor_telegram_id,
                    text=notification_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self._save_doctor_notification(db, consultation_id, doctor_telegram_id, message.message_id)
                successful_notifications += 1
                
                logger.info(f"Notification sent to doctor {doctor_name} ({doctor_telegram_id})")
                
            except Exception as e:
                logger.error(f"Failed to send notification to doctor {doctor_name}: {e}")
        
        return successful_notifications > 0
    
    def _save_doctor_notification(
        self, 
        db: Session,
        consultation_id: int, 
        doctor_telegram_id: int, 
        message_id: int
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            consultation_id: ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            doctor_telegram_id: Telegram ID –≤—Ä–∞—á–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—Ä–∞—á–∞ –ø–æ telegram_id
            doctor = db.query(Doctor).filter(Doctor.telegram_id == doctor_telegram_id).first()
            
            if doctor:
                notification = DoctorNotification(
                    consultation_id=consultation_id,
                    doctor_id=doctor.id,
                    message_id=message_id
                )
                db.add(notification)
                db.commit()
        except Exception as e:
            logger.error(f"Error saving doctor notification: {e}")
            db.rollback()
    
    async def assign_doctor_to_consultation(
        self, 
        db: Session,
        consultation_id: int, 
        doctor_telegram_id: int
    ) -> Tuple[bool, str]:
        """
        –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            consultation_id: ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            doctor_telegram_id: Telegram ID –≤—Ä–∞—á–∞
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—Ä–∞—á–∞
            doctor = db.query(Doctor).filter(Doctor.telegram_id == doctor_telegram_id).first()
            
            if not doctor:
                return False, "–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
            consultation = db.query(ActiveConsultation).filter(ActiveConsultation.id == consultation_id).first()
            
            if not consultation:
                return False, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            if consultation.status != 'waiting':
                return False, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –≤—Ä–∞—á—É"
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Ä–∞—á–∞
            consultation.doctor_id = doctor.id
            consultation.status = 'assigned'
            db.commit()
            
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
            notifications = db.query(DoctorNotification).filter(
                DoctorNotification.consultation_id == consultation_id,
                DoctorNotification.doctor_id == doctor.id
            ).all()
            
            for notification in notifications:
                notification.is_responded = True
            
            db.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤—Ä–∞—á–µ–π, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∑–∞–Ω—è—Ç
            await self._notify_other_doctors_client_taken(db, consultation_id, doctor.full_name, doctor_telegram_id)
            
            return True, f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Ä–∞—á—É {doctor.full_name}"
                
        except Exception as e:
            logger.error(f"Error assigning doctor to consultation: {e}")
            db.rollback()
            return False, f"–û—à–∏–±–∫–∞: {e}"
    
    async def _notify_other_doctors_client_taken(
        self, 
        db: Session,
        consultation_id: int, 
        assigned_doctor_name: str, 
        assigned_doctor_telegram_id: int
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –¥—Ä—É–≥–∏—Ö –≤—Ä–∞—á–µ–π, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –≤–∑—è—Ç
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            consultation_id: ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            assigned_doctor_name: –ò–º—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
            assigned_doctor_telegram_id: Telegram ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        """
        if not self.vet_bot:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notifications = db.query(DoctorNotification, Doctor).join(
                Doctor, DoctorNotification.doctor_id == Doctor.id
            ).filter(
                DoctorNotification.consultation_id == consultation_id,
                DoctorNotification.is_responded == False,
                Doctor.telegram_id != assigned_doctor_telegram_id
            ).all()
            
            for notification, doctor in notifications:
                try:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.vet_bot.edit_message_text(
                        chat_id=doctor.telegram_id,
                        message_id=notification.message_id,
                        text=f"‚ùå **–ö–ª–∏–µ–Ω—Ç —É–∂–µ –≤–∑—è—Ç**\n\nüë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {assigned_doctor_name}\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}",
                        parse_mode='Markdown'
                    )
                    
                    # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
                    notification.is_responded = True
                    
                except Exception as e:
                    logger.error(f"Failed to update notification for doctor {doctor.full_name}: {e}")
            
            db.commit()
            
        except Exception as e:
            logger.error(f"Error notifying other doctors: {e}")
            db.rollback()
    
    async def send_message_to_client(
        self, 
        client_id: int, 
        message_text: str, 
        from_doctor: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç –≤—Ä–∞—á–∞
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            from_doctor: –ò–º—è –≤—Ä–∞—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.main_bot:
            logger.error("MAIN_BOT_TOKEN not configured")
            return False
        
        try:
            prefix = f"üë®‚Äç‚öïÔ∏è **–í—Ä–∞—á {from_doctor}:**\n\n" if from_doctor else ""
            
            await self.main_bot.send_message(
                chat_id=client_id,
                text=f"{prefix}{message_text}",
                parse_mode='Markdown'
            )
            
            return True
        except Exception as e:
            logger.error(f"Failed to send message to client {client_id}: {e}")
            return False
    
    async def send_message_to_doctor(
        self, 
        doctor_telegram_id: int, 
        message_text: str, 
        from_client: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞—á—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            doctor_telegram_id: Telegram ID –≤—Ä–∞—á–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            from_client: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.vet_bot:
            logger.error("VET_BOT_TOKEN not configured")
            return False
        
        try:
            prefix = f"üë§ **–ö–ª–∏–µ–Ω—Ç {from_client}:**\n\n" if from_client else ""
            
            await self.vet_bot.send_message(
                chat_id=doctor_telegram_id,
                text=f"{prefix}{message_text}",
                parse_mode='Markdown'
            )
            
            return True
        except Exception as e:
            logger.error(f"Failed to send message to doctor {doctor_telegram_id}: {e}")
            return False