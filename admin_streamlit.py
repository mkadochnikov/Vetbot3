#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ Streamlit –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import streamlit as st
import sqlite3
import pandas as pd
import requests
import json
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

class VetBotAdmin:
    def __init__(self, db_path='vetbot.db'):
        self.db_path = db_path
    
    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_path)
    
    def get_all_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = self.get_db_connection()
        query = """
        SELECT u.user_id, u.username, u.first_name, u.last_name, u.created_at,
               COUNT(c.id) as consultations_count,
               COUNT(vc.id) as calls_count,
               MAX(c.created_at) as last_consultation
        FROM users u
        LEFT JOIN consultations c ON u.user_id = c.user_id
        LEFT JOIN vet_calls vc ON u.user_id = vc.user_id
        GROUP BY u.user_id
        ORDER BY last_consultation DESC NULLS LAST
        """
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df
    
    def get_user_consultations(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.get_db_connection()
        query = """
        SELECT id, question, response, created_at, admin_response, admin_username
        FROM consultations 
        WHERE user_id = ? 
        ORDER BY created_at DESC
        """
        df = pd.read_sql_query(query, conn, params=(user_id,))
        conn.close()
        return df
    
    def get_user_calls(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.get_db_connection()
        query = """
        SELECT * FROM vet_calls 
        WHERE user_id = ? 
        ORDER BY created_at DESC
        """
        df = pd.read_sql_query(query, conn, params=(user_id,))
        conn.close()
        return df
    
    def is_admin_session_active(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é"""
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT admin_username FROM admin_sessions 
            WHERE user_id = ? AND is_active = 1
        """, (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None
    
    def start_admin_session(self, user_id, admin_username):
        """–ù–∞—á–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é"""
        conn = self.get_db_connection()
        cursor = conn.cursor()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE admin_sessions 
            SET is_active = 0, ended_at = CURRENT_TIMESTAMP 
            WHERE user_id = ? AND is_active = 1
        """, (user_id,))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        cursor.execute("""
            INSERT INTO admin_sessions (user_id, admin_username)
            VALUES (?, ?)
        """, (user_id, admin_username))
        
        conn.commit()
        conn.close()
    
    def end_admin_session(self, user_id):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é"""
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE admin_sessions 
            SET is_active = 0, ended_at = CURRENT_TIMESTAMP 
            WHERE user_id = ? AND is_active = 1
        """, (user_id,))
        conn.commit()
        conn.close()
    
    def add_admin_message_to_queue(self, user_id, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO admin_message_queue (user_id, message)
            VALUES (?, ?)
        """, (user_id, message))
        conn.commit()
        conn.close()
    
    def send_telegram_message(self, user_id, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
        try:
            url = f"{TELEGRAM_API_URL}/sendMessage"
            data = {
                'chat_id': user_id,
                'text': f"üë®‚Äç‚öïÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞:\n\n{message}",
                'parse_mode': 'HTML'
            }
            response = requests.post(url, data=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        conn = self.get_db_connection()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        stats['total_users'] = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        cursor.execute("SELECT COUNT(*) FROM consultations")
        stats['total_consultations'] = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        cursor.execute("SELECT COUNT(*) FROM vet_calls")
        stats['total_calls'] = cursor.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        cursor.execute("SELECT COUNT(*) FROM admin_sessions WHERE is_active = 1")
        stats['active_sessions'] = cursor.fetchone()[0]
        
        # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute("""
            SELECT COUNT(*) FROM consultations 
            WHERE created_at > datetime('now', '-1 day')
        """)
        stats['consultations_24h'] = cursor.fetchone()[0]
        
        conn.close()
        return stats

def main():
    st.set_page_config(
        page_title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞",
        page_icon="ü©∫",
        layout="wide"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–∫–ª–∞—Å—Å–∞
    admin = VetBotAdmin()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü©∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏", "üìû –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤"]
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if page == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        stats = admin.get_statistics()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", stats['total_users'])
        
        with col2:
            st.metric("üí¨ –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", stats['total_consultations'])
        
        with col3:
            st.metric("üìû –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", stats['total_calls'])
        
        with col4:
            st.metric("üî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", stats['active_sessions'])
        
        st.markdown("---")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üìà –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞ 24—á", stats['consultations_24h'])
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        conn = admin.get_db_connection()
        activity_query = """
        SELECT DATE(created_at) as date, COUNT(*) as count
        FROM consultations 
        WHERE created_at > datetime('now', '-7 days')
        GROUP BY DATE(created_at)
        ORDER BY date
        """
        activity_df = pd.read_sql_query(activity_query, conn)
        conn.close()
        
        if not activity_df.empty:
            st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            st.line_chart(activity_df.set_index('date'))
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif page == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        st.header("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        users_df = admin.get_all_users()
        
        if not users_df.empty:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/username:")
            
            with col2:
                min_consultations = st.number_input("–ú–∏–Ω–∏–º—É–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:", min_value=0, value=0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_df = users_df.copy()
            
            if search_term:
                filtered_df = filtered_df[
                    filtered_df['first_name'].str.contains(search_term, case=False, na=False) |
                    filtered_df['username'].str.contains(search_term, case=False, na=False)
                ]
            
            if min_consultations > 0:
                filtered_df = filtered_df[filtered_df['consultations_count'] >= min_consultations]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                filtered_df,
                column_config={
                    "user_id": "ID",
                    "username": "Username",
                    "first_name": "–ò–º—è",
                    "last_name": "–§–∞–º–∏–ª–∏—è",
                    "created_at": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    "consultations_count": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                    "calls_count": "–ó–∞—è–≤–∫–∏",
                    "last_consultation": "–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                },
                use_container_width=True
            )
            
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            st.markdown("---")
            st.subheader("üë§ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            selected_user_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                options=filtered_df['user_id'].tolist(),
                format_func=lambda x: f"{filtered_df[filtered_df['user_id']==x]['first_name'].iloc[0]} ({x})"
            )
            
            if selected_user_id:
                user_info = filtered_df[filtered_df['user_id'] == selected_user_id].iloc[0]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**ID:** {user_info['user_id']}")
                    st.write(f"**–ò–º—è:** {user_info['first_name']} {user_info['last_name']}")
                    st.write(f"**Username:** @{user_info['username']}")
                
                with col2:
                    st.write(f"**–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:** {user_info['consultations_count']}")
                    st.write(f"**–ó–∞—è–≤–∫–∏:** {user_info['calls_count']}")
                    st.write(f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user_info['created_at']}")
                
                # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                consultations_df = admin.get_user_consultations(selected_user_id)
                
                if not consultations_df.empty:
                    st.subheader("üí¨ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
                    
                    for _, consultation in consultations_df.iterrows():
                        with st.expander(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç {consultation['created_at'][:16]}"):
                            st.write("**–í–æ–ø—Ä–æ—Å:**")
                            st.write(consultation['question'])
                            st.write("**–û—Ç–≤–µ—Ç AI:**")
                            st.write(consultation['response'])
                            
                            if consultation['admin_response']:
                                st.write("**–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞:**")
                                st.write(consultation['admin_response'])
                                st.write(f"*–û—Ç–≤–µ—Ç–∏–ª: {consultation['admin_username']}*")
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    elif page == "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏":
        st.header("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏")
        
        users_df = admin.get_all_users()
        
        if not users_df.empty:
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_user_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:",
                options=users_df['user_id'].tolist(),
                format_func=lambda x: f"{users_df[users_df['user_id']==x]['first_name'].iloc[0]} ({x})"
            )
            
            if selected_user_id:
                user_info = users_df[users_df['user_id'] == selected_user_id].iloc[0]
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_info['first_name']} (@{user_info['username']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                active_admin = admin.is_admin_session_active(selected_user_id)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if active_admin:
                        st.success(f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å {active_admin}")
                        if st.button("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"):
                            admin.end_admin_session(selected_user_id)
                            st.rerun()
                    else:
                        st.info("üî¥ –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                        admin_name = st.text_input("–í–∞—à–µ –∏–º—è:", value="–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä")
                        if st.button("üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é"):
                            admin.start_admin_session(selected_user_id, admin_name)
                            st.success("–°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞!")
                            st.rerun()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                st.markdown("---")
                st.subheader("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                message_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", height=100)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"):
                        if message_text:
                            admin.add_admin_message_to_queue(selected_user_id, message_text)
                            st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!")
                        else:
                            st.error("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                
                with col2:
                    if st.button("‚ö° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"):
                        if message_text:
                            if admin.send_telegram_message(selected_user_id, message_text):
                                st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                            else:
                                st.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!")
                        else:
                            st.error("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                
                # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                st.markdown("---")
                consultations_df = admin.get_user_consultations(selected_user_id)
                
                if not consultations_df.empty:
                    st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
                    
                    for _, consultation in consultations_df.head(5).iterrows():
                        with st.container():
                            st.markdown(f"**{consultation['created_at'][:16]}**")
                            
                            # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            st.markdown("üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**")
                            st.markdown(f"> {consultation['question']}")
                            
                            # –û—Ç–≤–µ—Ç AI
                            st.markdown("ü§ñ **AI-–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä:**")
                            st.markdown(f"> {consultation['response'][:200]}...")
                            
                            # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                            if consultation['admin_response']:
                                st.markdown("üë®‚Äç‚öïÔ∏è **–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä:**")
                                st.markdown(f"> {consultation['admin_response']}")
                            
                            st.markdown("---")
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤
    elif page == "üìû –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤":
        st.header("üìû –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞")
        
        conn = admin.get_db_connection()
        calls_query = """
        SELECT vc.*, u.first_name, u.username
        FROM vet_calls vc
        JOIN users u ON vc.user_id = u.user_id
        ORDER BY vc.created_at DESC
        """
        calls_df = pd.read_sql_query(calls_query, conn)
        conn.close()
        
        if not calls_df.empty:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2, col3 = st.columns(3)
            
            with col1:
                status_filter = st.selectbox(
                    "–°—Ç–∞—Ç—É—Å:",
                    options=['–í—Å–µ'] + list(calls_df['status'].unique())
                )
            
            with col2:
                urgency_filter = st.selectbox(
                    "–°—Ä–æ—á–Ω–æ—Å—Ç—å:",
                    options=['–í—Å–µ'] + list(calls_df['urgency'].unique())
                )
            
            with col3:
                days_filter = st.selectbox(
                    "–ü–µ—Ä–∏–æ–¥:",
                    options=['–í—Å–µ', '–°–µ–≥–æ–¥–Ω—è', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü']
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_calls = calls_df.copy()
            
            if status_filter != '–í—Å–µ':
                filtered_calls = filtered_calls[filtered_calls['status'] == status_filter]
            
            if urgency_filter != '–í—Å–µ':
                filtered_calls = filtered_calls[filtered_calls['urgency'] == urgency_filter]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞—è–≤–∫–∏
            for _, call in filtered_calls.head(10).iterrows():
                with st.expander(f"–ó–∞—è–≤–∫–∞ #{call['id']} - {call['name']} ({call['status']})"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–ö–ª–∏–µ–Ω—Ç:** {call['name']}")
                        st.write(f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {call['phone']}")
                        st.write(f"**–ê–¥—Ä–µ—Å:** {call['address']}")
                        st.write(f"**–ü–∏—Ç–æ–º–µ—Ü:** {call['pet_name']} ({call['pet_type']})")
                        st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {call['pet_age']}")
                    
                    with col2:
                        st.write(f"**–°—Ä–æ—á–Ω–æ—Å—Ç—å:** {call['urgency']}")
                        st.write(f"**–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:** {call['preferred_time']}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {call['status']}")
                        st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {call['created_at']}")
                    
                    st.write(f"**–ü—Ä–æ–±–ª–µ–º–∞:** {call['problem']}")
                    
                    if call['comments']:
                        st.write(f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {call['comments']}")
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        if st.button(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{call['id']}", key=f"confirm_{call['id']}"):
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                            st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    
                    with col2:
                        if st.button(f"üöó –í –ø—É—Ç–∏ #{call['id']}", key=f"progress_{call['id']}"):
                            st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    
                    with col3:
                        if st.button(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å #{call['id']}", key=f"complete_{call['id']}"):
                            st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    
                    with col4:
                        if st.button(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{call['id']}", key=f"cancel_{call['id']}"):
                            st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            st.info("–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **ü©∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å v2.1.0**
    
    –§—É–Ω–∫—Ü–∏–∏:
    - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    - üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏  
    - üí¨ –î–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    - üìû –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤ –≤—Ä–∞—á–∞
    
    –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """)

if __name__ == "__main__":
    main()

