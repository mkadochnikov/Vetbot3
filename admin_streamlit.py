# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ Streamlit –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import streamlit as st
import sqlite3
import pandas as pd
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class VetBotAdmin:
    def __init__(self, db_path='vetbot.db'):
        self.db_path = db_path
    
    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return sqlite3.connect(self.db_path)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return {'total_users': 0, 'total_consultations': 0, 'total_calls': 0, 'today_consultations': 0}
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = conn.execute("SELECT COUNT(*) FROM users")
            stats['total_users'] = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            cursor = conn.execute("SELECT COUNT(*) FROM consultations")
            stats['total_consultations'] = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
            cursor = conn.execute("SELECT COUNT(*) FROM vet_calls")
            stats['total_calls'] = cursor.fetchone()[0]
            
            # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor = conn.execute("SELECT COUNT(*) FROM consultations WHERE DATE(created_at) = ?", (today,))
            stats['today_consultations'] = cursor.fetchone()[0]
            
            conn.close()
            return stats
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_users': 0, 'total_consultations': 0, 'total_calls': 0, 'today_consultations': 0}
    
    def get_recent_users(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
            SELECT user_id, username, first_name, last_name, created_at
            FROM users 
            ORDER BY created_at DESC 
            LIMIT ?
            """
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return pd.DataFrame()
    
    def get_recent_consultations(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
            SELECT c.id, c.user_id, u.username, c.question, c.response, c.created_at
            FROM consultations c
            LEFT JOIN users u ON c.user_id = u.user_id
            ORDER BY c.created_at DESC 
            LIMIT ?
            """
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {e}")
            return pd.DataFrame()

def main():
    st.set_page_config(
        page_title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞",
        page_icon="ü©∫",
        layout="wide"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü©∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ v2.1.0")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    admin = VetBotAdmin()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        conn = admin.get_db_connection()
        if conn:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            conn.close()
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if page == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        stats = admin.get_statistics()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", stats['total_users'])
        
        with col2:
            st.metric("üí¨ –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", stats['total_consultations'])
        
        with col3:
            st.metric("üìû –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤", stats['total_calls'])
        
        with col4:
            st.metric("üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è", stats['today_consultations'])
        
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
        st.info("–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif page == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        st.header("üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        users_df = admin.get_recent_users(20)
        
        if not users_df.empty:
            st.dataframe(users_df, use_container_width=True)
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    elif page == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
        st.header("üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        
        consultations_df = admin.get_recent_consultations(20)
        
        if not consultations_df.empty:
            for _, row in consultations_df.iterrows():
                with st.expander(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{row['id']} - {row['username'] or '–ê–Ω–æ–Ω–∏–º'}"):
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {row['user_id']}")
                    st.write(f"**–í–æ–ø—Ä–æ—Å:** {row['question']}")
                    st.write(f"**–û—Ç–≤–µ—Ç AI:** {row['response'][:200]}...")
                    st.write(f"**–î–∞—Ç–∞:** {row['created_at']}")
        else:
            st.info("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    elif page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("ü§ñ Telegram –±–æ—Ç")
            st.write("- AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å DeepSeek")
            st.write("- –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏")
            st.write("- –§–æ—Ä–º–∞ –≤—ã–∑–æ–≤–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞")
            
        with col2:
            st.subheader("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            st.write("- –ü–æ—Ä—Ç: 5000")
            st.write("- –§–æ—Ä–º–∞ –≤—ã–∑–æ–≤–∞ –≤—Ä–∞—á–∞")
            st.write("- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã")
        
        st.markdown("---")
        
        st.subheader("üìä –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã")
        st.code("Vetbot3 v2.1.0")
        
        st.subheader("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        st.write("- Python 3.x")
        st.write("- Streamlit")
        st.write("- SQLite")
        st.write("- Telegram Bot API")
        st.write("- DeepSeek AI API")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **ü©∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å v2.1.0**
    
    –§—É–Ω–∫—Ü–∏–∏:
    - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    - üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏  
    - üí¨ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    - ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    
    –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """)

if __name__ == "__main__":
    main()
