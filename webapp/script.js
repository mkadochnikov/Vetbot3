// JavaScript –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    tg.ready();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    tg.MainButton.text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É";
    tg.MainButton.color = "#4CAF50";
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
    applyTelegramTheme();
    
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prefillUserData();
});

function setupEventListeners() {
    const form = document.getElementById('callForm');
    const submitBtn = document.getElementById('submitBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    submitBtn.addEventListener('click', handleSubmit);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    cancelBtn.addEventListener('click', handleCancel);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const requiredFields = form.querySelectorAll('[required]');
    requiredFields.forEach(field => {
        field.addEventListener('input', validateField);
        field.addEventListener('blur', validateField);
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneInput = document.getElementById('phone');
    phoneInput.addEventListener('input', formatPhone);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
    tg.MainButton.onClick(handleSubmit);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('input', updateMainButton);
}

function applyTelegramTheme() {
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã Telegram
    if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–º—ã Telegram
    const root = document.documentElement;
    if (tg.themeParams) {
        root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
        root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
        root.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
        root.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#4CAF50');
        root.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
        root.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f8f9fa');
    }
}

function prefillUserData() {
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        const nameField = document.getElementById('name');
        
        if (user.first_name && !nameField.value) {
            nameField.value = user.first_name + (user.last_name ? ' ' + user.last_name : '');
        }
    }
}

function validateField(event) {
    const field = event.target;
    const value = field.value.trim();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
    field.classList.remove('error');
    const existingError = field.parentNode.querySelector('.error-message');
    if (existingError) {
        existingError.remove();
    }
    
    let isValid = true;
    let errorMessage = '';
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (field.hasAttribute('required') && !value) {
        isValid = false;
        errorMessage = '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    switch (field.id) {
        case 'phone':
            if (value && !isValidPhone(value)) {
                isValid = false;
                errorMessage = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
            }
            break;
        case 'name':
            if (value && value.length < 2) {
                isValid = false;
                errorMessage = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            }
            break;
        case 'address':
            if (value && value.length < 10) {
                isValid = false;
                errorMessage = '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å';
            }
            break;
        case 'problem':
            if (value && value.length < 10) {
                isValid = false;
                errorMessage = '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ';
            }
            break;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (!isValid) {
        field.classList.add('error');
        const errorElement = document.createElement('span');
        errorElement.className = 'error-message';
        errorElement.textContent = errorMessage;
        field.parentNode.appendChild(errorElement);
    }
    
    return isValid;
}

function isValidPhone(phone) {
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
    return phoneRegex.test(phone);
}

function formatPhone(event) {
    let value = event.target.value.replace(/\D/g, '');
    
    if (value.length > 0) {
        if (value[0] === '8') {
            value = '7' + value.slice(1);
        }
        if (value[0] === '7') {
            value = '+7 (' + value.slice(1, 4) + ') ' + value.slice(4, 7) + '-' + value.slice(7, 9) + '-' + value.slice(9, 11);
        }
    }
    
    event.target.value = value;
}

function updateMainButton() {
    const form = document.getElementById('callForm');
    const isValid = validateForm(false);
    
    if (isValid) {
        tg.MainButton.show();
    } else {
        tg.MainButton.hide();
    }
}

function validateForm(showErrors = true) {
    const form = document.getElementById('callForm');
    const requiredFields = form.querySelectorAll('[required]');
    let isValid = true;
    
    requiredFields.forEach(field => {
        if (showErrors) {
            const fieldValid = validateField({ target: field });
            if (!fieldValid) isValid = false;
        } else {
            if (!field.value.trim()) isValid = false;
        }
    });
    
    return isValid;
}

function collectFormData() {
    const form = document.getElementById('callForm');
    const formData = new FormData(form);
    const data = {};
    
    for (let [key, value] of formData.entries()) {
        data[key] = value.trim();
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    data.timestamp = new Date().toISOString();
    data.user_id = tg.initDataUnsafe?.user?.id || null;
    data.username = tg.initDataUnsafe?.user?.username || null;
    
    return data;
}

function handleSubmit() {
    const submitBtn = document.getElementById('submitBtn');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!validateForm(true)) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    submitBtn.disabled = true;
    submitBtn.classList.add('loading');
    submitBtn.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    try {
        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        const formData = collectFormData();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç
        tg.sendData(JSON.stringify(formData));
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        tg.showAlert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í—Ä–∞—á —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        
        // –ó–∞–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        setTimeout(() => {
            tg.close();
        }, 1500);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = false;
        submitBtn.classList.remove('loading');
        submitBtn.textContent = 'üì± –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞';
    }
}

function handleCancel() {
    tg.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã?', (confirmed) => {
        if (confirmed) {
            tg.close();
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
window.addEventListener('orientationchange', function() {
    setTimeout(() => {
        tg.expand();
    }, 100);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('beforeunload', function(event) {
    const form = document.getElementById('callForm');
    const hasData = Array.from(form.elements).some(element => element.value.trim() !== '');
    
    if (hasData) {
        event.preventDefault();
        event.returnValue = '';
    }
});

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
tg.expand();

// –í–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –∂–µ—Å—Ç–∞
tg.enableClosingConfirmation();

